{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/ErrorMessage.js","Deck/CreateDeck.js","Deck/EditDeck.js","Deck/Study.js","Card/Card.js","Deck/Deck.js","Layout/List.js","Card/CardForm.js","Card/AddCard.js","Card/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updatedCard","deleteCard","append","ErrorMessage","error","children","style","color","message","CreateDeck","initialState","description","useState","formData","setFormData","undefined","setError","history","useHistory","handleChange","target","value","useEffect","push","aria-label","href","aria-current","onSubmit","event","preventDefault","abortController","AbortController","createDeck","then","data","catch","abort","htmlFor","type","placeholder","onChange","onClick","EditDeck","useParams","to","updateDeck","Study","setDeck","flipped","setFlipped","cardIndex","setCardIndex","getDeck","length","back","front","prevState","window","confirm","Card","handleDelete","Deck","list","map","List","decks","setDecks","getData","CardForm","props","handleSubmit","handleReset","AddCard","createCard","EditCard","updateCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59df6ce1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append('Content-Type', 'application/json');\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== 'AbortError') {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: 'PUT',\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: 'DELETE', signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: 'PUT',\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: 'DELETE', signal };\n  return await fetchJson(url, options);\n}\n","import React from 'react';\n\nexport const ErrorMessage = ({ error, children }) => (\n  <main className=\"container\">\n    <p style={{ color: 'red' }}>ERROR: {error.message}</p>\n    {children}\n  </main>\n);\n\nexport default ErrorMessage;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { createDeck } from '../utils/api';\nimport ErrorMessage from '../Layout/ErrorMessage';\n\nfunction CreateDeck() {\n  const initialState = {\n    name: '',\n    description: '',\n  };\n\n  const [formData, setFormData] = useState({ ...initialState });\n  const [error, setError] = useState(undefined);\n  const history = useHistory();\n\n  const handleChange = ({ target }) => {\n    const value = target.value;\n\n    setFormData({\n      ...formData,\n      [target.name]: value,\n    });\n  };\n\n  const handleReset = (event) => {\n    setFormData({ ...initialState });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const abortController = new AbortController();\n\n    createDeck(formData, abortController.signal)\n      .then((data) => setFormData(data))\n      .catch(setError);\n\n    return () => abortController.abort();\n  };\n\n  useEffect(() => {\n    if (formData.id) {\n      history.push(`/decks/${formData.id}`);\n    }\n  }, [formData.id, history]);\n\n  if (error) {\n    return <ErrorMessage error={error} />;\n  }\n  if (formData)\n    return (\n      <>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Create Deck\n            </li>\n          </ol>\n        </nav>\n        <h1>Create Deck</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\" className=\"form-label\">\n              Name\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"Deck Name\"\n              onChange={handleChange}\n              value={formData.name}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\" className=\"form-label\">\n              Description\n            </label>\n            <textarea\n              type=\"textarea\"\n              className=\"form-control\"\n              id=\"description\"\n              name=\"description\"\n              placeholder=\"Brief description of the deck\"\n              onChange={handleChange}\n              value={formData.description}\n            />\n          </div>\n          <button\n            className=\"btn btn-secondary m-2\"\n            type=\"reset\"\n            onClick={handleReset}\n          >\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\n            Submit\n          </button>\n        </form>\n      </>\n    );\n}\n\nexport default CreateDeck;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { updateDeck, readDeck } from '../utils/api';\nimport ErrorMessage from '../Layout/ErrorMessage';\n\nfunction EditDeck() {\n  const { deckId } = useParams();\n  const [formData, setFormData] = useState({});\n  const [error, setError] = useState(undefined);\n\n  useEffect(() => {\n    readDeck(deckId).then(setFormData);\n  }, [deckId]);\n\n  const handleChange = ({ target }) => {\n    const value = target.value;\n\n    setFormData({\n      ...formData,\n      [target.name]: value,\n    });\n  };\n\n  const handleReset = (event) => {\n    readDeck(deckId).then(setFormData);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const abortController = new AbortController();\n    updateDeck(formData, abortController.signal).then().catch(setError);\n\n    if (error) {\n      return <ErrorMessage error={error} />;\n    }\n  };\n\n  if (formData)\n    return (\n      <>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </a>\n            </li>\n            <li className=\"breadcrumb-item\">\n              <Link to={`/decks/${deckId}`}>{formData.name}</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Edit Deck\n            </li>\n          </ol>\n        </nav>\n        <h1>Edit Deck</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\" className=\"form-label\">\n              Name\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"name\"\n              name=\"name\"\n              placeholder={formData.name}\n              onChange={handleChange}\n              value={formData.name}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\" className=\"form-label\">\n              Description\n            </label>\n            <textarea\n              className=\"form-control\"\n              id=\"description\"\n              name=\"description\"\n              placeholder={formData.description}\n              onChange={handleChange}\n              value={formData.description}\n            />\n          </div>\n          <input\n            className=\"btn btn-secondary mr-2\"\n            type=\"reset\"\n            onClick={handleReset}\n            value=\"Reset\"\n          ></input>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n      </>\n    );\n}\n\nexport default EditDeck;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { readDeck } from '../utils/api';\nimport ErrorMessage from '../Layout/ErrorMessage';\n\nexport const Study = () => {\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState({ cards: [] });\n  const [error, setError] = useState(undefined);\n  const [flipped, setFlipped] = useState(false);\n  const [cardIndex, setCardIndex] = useState(0);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    async function getDeck() {\n      try {\n        let data = await readDeck(deckId, abortController.signal);\n        setDeck(data);\n      } catch (err) {\n        setError(err);\n      }\n    }\n    getDeck();\n    return () => abortController.abort();\n  }, [deckId]);\n\n  if (error) {\n    return <ErrorMessage error={error} />;\n  }\n\n  function nextCard() {\n    if (cardIndex === deck.cards.length - 1) {\n      const result = window.confirm('Do you want to restart the deck?');\n      if (result) {\n        setCardIndex(0);\n      }\n    } else {\n      setCardIndex(cardIndex + 1);\n    }\n    setFlipped((prevState) => !prevState);\n  }\n\n  function flipCard() {\n    setFlipped((prevState) => !prevState);\n  }\n\n  if (deck) {\n    return (\n      <>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </a>\n            </li>\n            <li className=\"breadcrumb-item\" aria-current=\"page\">\n              <a href={`/decks/${deck.id}`}>{deck.name}</a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Study\n            </li>\n          </ol>\n        </nav>\n        <h1>Study: {deck.name}</h1>\n        <div className=\"col-sm-12\">\n          {deck.cards.length > 2 ? (\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">\n                  Card {cardIndex + 1} of {deck.cards.length}\n                </h5>\n                <p className=\"card-text\">\n                  {!flipped\n                    ? `${deck.cards[cardIndex].front}`\n                    : `${deck.cards[cardIndex].back}`}\n                </p>\n                <button className=\"btn btn-secondary m-2\" onClick={flipCard}>\n                  <span className=\"oi oi-action-redo\" /> Flip\n                </button>\n                {flipped && (\n                  <button className=\"btn btn-primary\" onClick={nextCard}>\n                    <span className=\"oi oi-arrow-thick-right\" /> Next\n                  </button>\n                )}\n              </div>\n            </div>\n          ) : (\n            <>\n              <h3>Not enough cards.</h3>\n              <p>\n                You need at least 3 cards to study. There are{' '}\n                {deck.cards.length} cards in this deck.\n              </p>\n              <Link\n                to={`/decks/${deck.id}/cards/new`}\n                className=\"btn btn-primary\"\n              >\n                <span className=\"oi oi-plus\" /> Add Cards\n              </Link>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n};\nexport default Study;\n","import React from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { deleteCard } from '../utils/api';\n\nexport const Card = ({ card }) => {\n  const { deckId } = useParams();\n  const history = useHistory();\n\n  const handleDelete = async () => {\n    const result = window.confirm(\n      'Delete this card? \\nYou will not be able to recover it.'\n    );\n    if (result) {\n      deleteCard(card.id).then(history.push('/'));\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"card col-md-10\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <div className=\"card-body\">\n              <p className=\"card-text\">{card.front}</p>\n            </div>\n          </div>\n\n          <div className=\"col-md-6\">\n            <div className=\"card-body\">\n              <p className=\"card-text\">{card.back}</p>\n              <div className=\"text-right\">\n                <Link\n                  to={`/decks/${deckId}/cards/${card.id}/edit`}\n                  className=\"btn btn-secondary m-2\"\n                >\n                  <span className=\"oi oi-pencil\" /> Edit\n                </Link>\n\n                <button className=\"btn btn-danger m-2\" onClick={handleDelete}>\n                  <span className=\"oi oi-circle-x\" /> Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Card;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport Card from '../Card/Card';\nimport { deleteDeck, readDeck } from '../utils/api';\n\nexport const Deck = () => {\n  const { deckId } = useParams();\n  const history = useHistory();\n  const [deck, setDeck] = useState({ cards: [] });\n\n  useEffect(() => {\n    readDeck(deckId).then(setDeck);\n  }, [deckId]);\n\n  if (deck) {\n    const list = deck.cards.map((card) => <Card key={card.id} card={card} />);\n    return (\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              {deck.name}\n            </li>\n          </ol>\n        </nav>\n        <div>\n          <h5 className=\"card-title\">{deck.name}</h5>\n          <p className=\"card-text\">{deck.description}</p>\n\n          <Link to={`/decks/${deck.id}/edit`} className=\"btn btn-secondary m-2\">\n            <span className=\"oi oi-pencil\" /> Edit\n          </Link>\n\n          <Link to={`/decks/${deck.id}/study`} className=\"btn btn-primary m-2\">\n            <span className=\"oi oi-book\" /> Study\n          </Link>\n\n          <Link\n            to={`/decks/${deck.id}/cards/new`}\n            className=\"btn btn-secondary m-2\"\n          >\n            <span className=\"oi oi-plus\" /> Add Cards\n          </Link>\n          <button\n            className=\"btn btn-danger m-2\"\n            id={deck.id}\n            onClick={async () => {\n              const result = window.confirm(\n                'Delete this deck? \\nYou will not be able to recover it.'\n              );\n              if (result) {\n                deleteDeck(deck.id).then(history.push('/'));\n              }\n            }}\n          >\n            <span className=\"oi oi-circle-x\" /> Delete\n          </button>\n        </div>\n        <div>\n          <h2>Cards</h2>\n          <section>{list}</section>\n        </div>\n      </div>\n    );\n  } else {\n    return <div>No such deck</div>;\n  }\n};\n\nexport default Deck;\n","import React, { useState, useEffect } from 'react';\nimport { deleteDeck, listDecks } from '../utils/api';\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from './ErrorMessage';\n\nexport const List = () => {\n  const [decks, setDecks] = useState([]);\n  const [error, setError] = useState(undefined);\n\n  const abortController = new AbortController();\n  async function getData() {\n    try {\n      let data = await listDecks(abortController.signal);\n      setDecks(data);\n    } catch (err) {\n      setError(err);\n    }\n  }\n  useEffect(() => {\n    getData();\n    return () => abortController.abort();\n  }, []);\n\n  if (error) {\n    return <ErrorMessage error={error} />;\n  }\n  if (decks) {\n    const list = decks.map((deck) => {\n      return (\n        <div key={deck.id} className=\"card col-md-10\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-8\">\n                <h5 className=\"card-title\">{deck.name}</h5>\n              </div>\n              <div className=\"col-md-4\">\n                <p className=\"text-end\">{`${deck.cards.length} cards`}</p>\n              </div>\n            </div>\n            <p className=\"card-text\">{deck.description}</p>\n\n            <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary mr-2\">\n              <span className=\"oi oi-eye\" /> View\n            </Link>\n\n            <Link\n              to={`/decks/${deck.id}/study`}\n              className=\"btn btn-primary mr-2\"\n            >\n              <span className=\"oi oi-book\" /> Study\n            </Link>\n\n            <button\n              className=\"btn btn-danger\"\n              onClick={async () => {\n                const result = window.confirm(\n                  'Delete this deck? \\nYou will not be able to recover it.'\n                );\n                if (result) {\n                  deleteDeck(deck.id);\n                  getData();\n                }\n              }}\n            >\n              <span className=\"oi oi-circle-x\" /> Delete\n            </button>\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <main className=\"container\">\n        <div>\n          <Link to=\"decks/new\" className=\"btn btn-secondary m-3\">\n            <span className=\"oi oi-plus\" /> Create Deck\n          </Link>\n        </div>\n        <section className=\"row\">{list}</section>\n      </main>\n    );\n  }\n  return (\n    <div className=\"p-4 border border-top-0\">\n      <p>Loading...</p>\n    </div>\n  );\n};\nexport default List;\n","import React from 'react';\n\nfunction CardForm(props) {\n  return (\n    <>\n      <form onSubmit={props.handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"front\" className=\"form-label\">\n            Front Side\n          </label>\n          <textarea\n            type=\"textarea\"\n            className=\"form-control\"\n            id=\"front\"\n            name=\"front\"\n            placeholder={props.formData.front}\n            onChange={props.handleChange}\n            value={props.formData.front}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"back\" className=\"form-label\">\n            Back Side\n          </label>\n          <textarea\n            type=\"textarea\"\n            className=\"form-control\"\n            id=\"back\"\n            name=\"back\"\n            placeholder={props.formData.back}\n            onChange={props.handleChange}\n            value={props.formData.back}\n          />\n        </div>\n        <input\n          className=\"btn btn-secondary mr-3\"\n          type=\"reset\"\n          onClick={props.handleReset}\n          value=\"Reset\"\n        ></input>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default CardForm;\n","import React, { useEffect, useState } from 'react';\nimport { createCard, readDeck } from '../utils/api';\nimport ErrorMessage from '../Layout/ErrorMessage';\nimport { useParams, useHistory } from 'react-router-dom';\nimport CardForm from './CardForm';\n\nfunction AddCard() {\n  const initialState = {\n    front: '',\n    back: '',\n  };\n  const { deckId } = useParams();\n  const [formData, setFormData] = useState({ ...initialState });\n  const [error, setError] = useState(undefined);\n  const [deck, setDeck] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    readDeck(deckId).then(setDeck);\n  }, [deckId]);\n\n  const handleChange = ({ target }) => {\n    const value = target.value;\n\n    setFormData({\n      ...formData,\n      [target.name]: value,\n    });\n  };\n\n  const handleReset = (event) => {\n    setFormData({ ...initialState });\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const abortController = new AbortController();\n\n    createCard(deckId, formData, abortController.signal)\n      .then((data) => setFormData(data))\n      .catch(setError);\n\n    return () => abortController.abort();\n  };\n\n  useEffect(() => {\n    if (formData.id) {\n      history.push(`/decks/${deckId}`);\n    }\n  }, [formData.id, history, deckId]);\n\n  if (error) {\n    return <ErrorMessage error={error} />;\n  }\n  return (\n    <>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <a href=\"/\">\n              <span className=\"oi oi-home\" />\n              Home\n            </a>\n          </li>\n          <li className=\"breadcrumb-item\" aria-current=\"page\">\n            <a href={`/decks/${deckId}`}>{deck.name}</a>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            <span className=\"oi oi-plus\" /> Add Card\n          </li>\n        </ol>\n      </nav>\n      <h1>{deck.name}: Add Card</h1>\n      <CardForm\n        formData={formData}\n        handleChange={handleChange}\n        handleReset={handleReset}\n        handleSubmit={handleSubmit}\n      />\n    </>\n  );\n}\n\nexport default AddCard;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { updateCard, readCard, readDeck } from '../utils/api';\nimport ErrorMessage from '../Layout/ErrorMessage';\nimport CardForm from './CardForm';\n\nfunction EditCard() {\n  const { deckId, cardId } = useParams();\n  const [formData, setFormData] = useState({});\n  const [error, setError] = useState(undefined);\n  const [deck, setDeck] = useState({});\n\n  useEffect(() => {\n    readCard(cardId).then(setFormData);\n    readDeck(deckId).then(setDeck);\n  }, [cardId, deckId]);\n\n  const handleChange = ({ target }) => {\n    const value = target.value;\n\n    setFormData({\n      ...formData,\n      [target.name]: value,\n    });\n  };\n\n  const handleReset = (event) => {\n    readCard(cardId).then(setFormData);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const abortController = new AbortController();\n    updateCard(formData, abortController.signal).then().catch(setError);\n\n    if (error) {\n      return <ErrorMessage error={error} />;\n    }\n  };\n\n  if (formData && deck) {\n    return (\n      <>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </a>\n            </li>\n            <li className=\"breadcrumb-item\">\n              <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Edit Card {`${cardId}`}\n            </li>\n          </ol>\n        </nav>\n        <h1>Edit Card</h1>\n        <CardForm\n          formData={formData}\n          handleChange={handleChange}\n          handleReset={handleReset}\n          handleSubmit={handleSubmit}\n        />\n      </>\n    );\n  }\n}\n\nexport default EditCard;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './Header';\nimport NotFound from './NotFound';\nimport CreateDeck from '../Deck/CreateDeck';\nimport EditDeck from '../Deck/EditDeck';\nimport Study from '../Deck/Study';\nimport Deck from '../Deck/Deck';\nimport List from './List';\n\nimport AddCard from '../Card/AddCard';\nimport EditCard from '../Card/EditCard';\n\nfunction Layout() {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <List />\n          </Route>\n          <Route path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <Deck />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Layout from './Layout';\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}