{"ast":null,"code":"var _jsxFileName = \"/Users/sarahabbett/Documents/Repos/Project_Flashcards_Qualified_1/src/Layout/List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Deck from '../Deck/Deck.js';\nimport { listDecks } from '../utils/api';\nimport ErrorMessage from './ErrorMessage';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const List = () => {\n  _s();\n\n  const [decks, setDecks] = useState([]);\n  const [error, setError] = useState(undefined); //dependecy decks so that delete will render list again\n\n  function removeDeck(id) {\n    setDecks(decks.filter(deck => deck.id !== id));\n  }\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    listDecks(abortController.signal).then(setDecks).catch(setError);\n    return () => abortController.abort();\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  const list = decks.map(deck => /*#__PURE__*/_jsxDEV(Deck, {\n    deck: deck,\n    removeDeck: removeDeck\n  }, deck.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"decks/new\",\n      className: \"btn btn-secondary\",\n      children: \"Create Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"row\",\n      children: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(List, \"/YFrYNhE77TDN83PvDm3YEcq3ZE=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/sarahabbett/Documents/Repos/Project_Flashcards_Qualified_1/src/Layout/List.js"],"names":["React","useState","useEffect","Deck","listDecks","ErrorMessage","Link","List","decks","setDecks","error","setError","undefined","removeDeck","id","filter","deck","abortController","AbortController","signal","then","catch","abort","list","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACW,SAAD,CAAlC,CAFwB,CAGxB;;AACA,WAASC,UAAT,CAAoBC,EAApB,EAAwB;AACtBL,IAAAA,QAAQ,CAACD,KAAK,CAACO,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD;;AACDZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAd,IAAAA,SAAS,CAACa,eAAe,CAACE,MAAjB,CAAT,CAAkCC,IAAlC,CAAuCX,QAAvC,EAAiDY,KAAjD,CAAuDV,QAAvD;AACA,WAAO,MAAMM,eAAe,CAACK,KAAhB,EAAb;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIZ,KAAJ,EAAW;AACT,wBAAO,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,QAAMa,IAAI,GAAGf,KAAK,CAACgB,GAAN,CAAWR,IAAD,iBACrB,QAAC,IAAD;AAAoB,IAAA,IAAI,EAAEA,IAA1B;AAAgC,IAAA,UAAU,EAAEH;AAA5C,KAAWG,IAAI,CAACF,EAAhB;AAAA;AAAA;AAAA;AAAA,UADW,CAAb;AAGA,sBACE;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,WAAT;AAAqB,MAAA,SAAS,EAAC,mBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAS,MAAA,SAAS,EAAC,KAAnB;AAAA,gBAA0BS;AAA1B;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA3BM;;GAAMhB,I;;KAAAA,I;AA4Bb,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Deck from '../Deck/Deck.js';\nimport { listDecks } from '../utils/api';\n\nimport ErrorMessage from './ErrorMessage';\n\nimport { Link } from 'react-router-dom';\n\nexport const List = () => {\n  const [decks, setDecks] = useState([]);\n  const [error, setError] = useState(undefined);\n  //dependecy decks so that delete will render list again\n  function removeDeck(id) {\n    setDecks(decks.filter((deck) => deck.id !== id));\n  }\n  useEffect(() => {\n    const abortController = new AbortController();\n    listDecks(abortController.signal).then(setDecks).catch(setError);\n    return () => abortController.abort();\n  }, []);\n\n  if (error) {\n    return <ErrorMessage error={error} />;\n  }\n  const list = decks.map((deck) => (\n    <Deck key={deck.id} deck={deck} removeDeck={removeDeck} />\n  ));\n  return (\n    <main className=\"container\">\n      <Link to=\"decks/new\" className=\"btn btn-secondary\">\n        Create Deck\n      </Link>\n      <section className=\"row\">{list}</section>\n    </main>\n  );\n};\nexport default List;\n"]},"metadata":{},"sourceType":"module"}